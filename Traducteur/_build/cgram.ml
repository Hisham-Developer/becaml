type token =
  | IDENTIFIER of (string)
  | INTEGER of (int32)
  | FLOATING of (float)
  | CHARACTER of (string)
  | STRING of (string)
  | TYPEDEF_NAME
  | NAMESPACE_NAME
  | CLASS_NAME
  | ENUM_NAME
  | TEMPLATE_NAME
  | ELLIPSIS
  | COLONCOLON
  | DOTSTAR
  | ADDEQ
  | SUBEQ
  | MULEQ
  | DIVEQ
  | MODEQ
  | XOREQ
  | ANDEQ
  | OREQ
  | SL
  | SR
  | SREQ
  | SLEQ
  | EQ
  | NOTEQ
  | LTEQ
  | GTEQ
  | ANDAND
  | OROR
  | PLUSPLUS
  | MINUSMINUS
  | ARROWSTAR
  | ARROW
  | SHARP
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | LPARENTHESIS
  | RPARENTHESIS
  | SEMICOLON
  | COLON
  | TILDE
  | COMMA
  | EXCLAMATION
  | QUESTION
  | DOT
  | BACKSLASH
  | PLUS
  | MINUS
  | STAR
  | DIV
  | PERCENT
  | QUOTE
  | AND
  | OR
  | XOR
  | EQUAL
  | INF
  | SUP
  | ZERO
  | ATTRIBUTE
  | ASM
  | AUTO
  | BOOL
  | BREAK
  | CASE
  | CATCH
  | CHAR
  | CLASS
  | CONST
  | CONST_CAST
  | CONTINUE
  | DEFAULT
  | DELETE
  | DO
  | DOUBLE
  | DYNAMIC_CAST
  | ELSE
  | ENUM
  | EXPLICIT
  | EXPORT
  | EXTERN
  | FALSE
  | FLOAT
  | FOR
  | FRIEND
  | GOTO
  | IF
  | INHERITED
  | INLINE
  | INT
  | LONG
  | MUTABLE
  | NAMESPACE
  | NEW
  | OPERATOR
  | PRIVATE
  | PROTECTED
  | PUBLIC
  | REGISTER
  | REINTERPRET_CAST
  | RETURN
  | SHORT
  | SIGNED
  | SIZEOF
  | STATIC
  | STATIC_CAST
  | STRUCT
  | SWITCH
  | TEMPLATE
  | THIS
  | THROW
  | TRUE
  | TRY
  | TYPEDEF
  | TYPEID
  | TYPENAME
  | UNION
  | UNSIGNED
  | USING
  | VIRTUAL
  | VOID
  | VOLATILE
  | WCHAR_T
  | WHILE
  | IFNDEF
  | DEFINE
  | INCLUDE
  | IFDEF
  | ELIF
  | ENDIF
  | UNDEF
  | LINE
  | ERROR
  | PRAGMA
  | EOF

open Parsing;;
# 1 "cgram.mly"
 
open Struct;;

let macro_list = ref [] 
let inclusion_list = ref []
let enum_list = ref []
let classe_list = ref []
let private_methodes = ref []
let attributes = ref []
# 154 "cgram.ml"
let yytransl_const = [|
  262 (* TYPEDEF_NAME *);
  263 (* NAMESPACE_NAME *);
  264 (* CLASS_NAME *);
  265 (* ENUM_NAME *);
  266 (* TEMPLATE_NAME *);
  267 (* ELLIPSIS *);
  268 (* COLONCOLON *);
  269 (* DOTSTAR *);
  270 (* ADDEQ *);
  271 (* SUBEQ *);
  272 (* MULEQ *);
  273 (* DIVEQ *);
  274 (* MODEQ *);
  275 (* XOREQ *);
  276 (* ANDEQ *);
  277 (* OREQ *);
  278 (* SL *);
  279 (* SR *);
  280 (* SREQ *);
  281 (* SLEQ *);
  282 (* EQ *);
  283 (* NOTEQ *);
  284 (* LTEQ *);
  285 (* GTEQ *);
  286 (* ANDAND *);
  287 (* OROR *);
  288 (* PLUSPLUS *);
  289 (* MINUSMINUS *);
  290 (* ARROWSTAR *);
  291 (* ARROW *);
  292 (* SHARP *);
  293 (* LBRACE *);
  294 (* RBRACE *);
  295 (* LBRACKET *);
  296 (* RBRACKET *);
  297 (* LPARENTHESIS *);
  298 (* RPARENTHESIS *);
  299 (* SEMICOLON *);
  300 (* COLON *);
  301 (* TILDE *);
  302 (* COMMA *);
  303 (* EXCLAMATION *);
  304 (* QUESTION *);
  305 (* DOT *);
  306 (* BACKSLASH *);
  307 (* PLUS *);
  308 (* MINUS *);
  309 (* STAR *);
  310 (* DIV *);
  311 (* PERCENT *);
  312 (* QUOTE *);
  313 (* AND *);
  314 (* OR *);
  315 (* XOR *);
  316 (* EQUAL *);
  317 (* INF *);
  318 (* SUP *);
  319 (* ZERO *);
  320 (* ATTRIBUTE *);
  321 (* ASM *);
  322 (* AUTO *);
  323 (* BOOL *);
  324 (* BREAK *);
  325 (* CASE *);
  326 (* CATCH *);
  327 (* CHAR *);
  328 (* CLASS *);
  329 (* CONST *);
  330 (* CONST_CAST *);
  331 (* CONTINUE *);
  332 (* DEFAULT *);
  333 (* DELETE *);
  334 (* DO *);
  335 (* DOUBLE *);
  336 (* DYNAMIC_CAST *);
  337 (* ELSE *);
  338 (* ENUM *);
  339 (* EXPLICIT *);
  340 (* EXPORT *);
  341 (* EXTERN *);
  342 (* FALSE *);
  343 (* FLOAT *);
  344 (* FOR *);
  345 (* FRIEND *);
  346 (* GOTO *);
  347 (* IF *);
  348 (* INHERITED *);
  349 (* INLINE *);
  350 (* INT *);
  351 (* LONG *);
  352 (* MUTABLE *);
  353 (* NAMESPACE *);
  354 (* NEW *);
  355 (* OPERATOR *);
  356 (* PRIVATE *);
  357 (* PROTECTED *);
  358 (* PUBLIC *);
  359 (* REGISTER *);
  360 (* REINTERPRET_CAST *);
  361 (* RETURN *);
  362 (* SHORT *);
  363 (* SIGNED *);
  364 (* SIZEOF *);
  365 (* STATIC *);
  366 (* STATIC_CAST *);
  367 (* STRUCT *);
  368 (* SWITCH *);
  369 (* TEMPLATE *);
  370 (* THIS *);
  371 (* THROW *);
  372 (* TRUE *);
  373 (* TRY *);
  374 (* TYPEDEF *);
  375 (* TYPEID *);
  376 (* TYPENAME *);
  377 (* UNION *);
  378 (* UNSIGNED *);
  379 (* USING *);
  380 (* VIRTUAL *);
  381 (* VOID *);
  382 (* VOLATILE *);
  383 (* WCHAR_T *);
  384 (* WHILE *);
  385 (* IFNDEF *);
  386 (* DEFINE *);
  387 (* INCLUDE *);
  388 (* IFDEF *);
  389 (* ELIF *);
  390 (* ENDIF *);
  391 (* UNDEF *);
  392 (* LINE *);
  393 (* ERROR *);
  394 (* PRAGMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* INTEGER *);
  259 (* FLOATING *);
  260 (* CHARACTER *);
  261 (* STRING *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\004\000\005\000\006\000\007\000\008\000\008\000\001\000\
\010\000\010\000\010\000\009\000\009\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\016\000\018\000\018\000\019\000\019\000\019\000\012\000\
\012\000\012\000\012\000\012\000\012\000\021\000\020\000\026\000\
\026\000\026\000\027\000\027\000\023\000\022\000\028\000\030\000\
\030\000\024\000\031\000\031\000\032\000\032\000\033\000\033\000\
\029\000\029\000\029\000\029\000\035\000\034\000\034\000\034\000\
\034\000\034\000\034\000\039\000\039\000\039\000\038\000\038\000\
\040\000\041\000\041\000\042\000\043\000\043\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\015\000\015\000\
\015\000\047\000\052\000\044\000\053\000\014\000\014\000\014\000\
\014\000\055\000\056\000\056\000\054\000\054\000\054\000\013\000\
\025\000\048\000\048\000\050\000\050\000\017\000\017\000\045\000\
\045\000\057\000\057\000\046\000\046\000\051\000\051\000\037\000\
\037\000\049\000\049\000\000\000"

let yylen = "\002\000\
\001\000\002\000\002\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\001\000\001\000\001\000\000\000\002\000\003\000\003\000\004\000\
\003\000\002\000\007\000\004\000\004\000\003\000\003\000\003\000\
\006\000\006\000\003\000\003\000\001\000\003\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\005\000\006\000\000\000\
\001\000\003\000\001\000\003\000\003\000\003\000\003\000\000\000\
\003\000\008\000\000\000\002\000\002\000\004\000\001\000\001\000\
\000\000\002\000\002\000\002\000\004\000\001\000\002\000\001\000\
\002\000\001\000\001\000\001\000\001\000\001\000\005\000\006\000\
\005\000\008\000\007\000\004\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\000\000\001\000\
\003\000\005\000\005\000\001\000\002\000\001\000\001\000\005\000\
\001\000\003\000\001\000\002\000\000\000\001\000\003\000\013\000\
\006\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\
\001\000\000\000\001\000\000\000\001\000\000\000\003\000\000\000\
\003\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\000\000\089\000\088\000\000\000\000\000\
\090\000\000\000\000\000\091\000\000\000\087\000\132\000\092\000\
\000\000\000\000\017\000\018\000\019\000\040\000\041\000\042\000\
\043\000\044\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\100\000\115\000\000\000\002\000\003\000\004\000\000\000\016\000\
\021\000\093\000\094\000\000\000\032\000\010\000\012\000\011\000\
\013\000\000\000\015\000\014\000\000\000\103\000\005\000\006\000\
\007\000\008\000\009\000\000\000\105\000\025\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\028\000\029\000\000\000\
\000\000\000\000\000\000\064\000\063\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\035\000\000\000\000\000\000\000\000\000\052\000\046\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\039\000\033\000\000\000\000\000\000\000\
\000\000\047\000\000\000\113\000\097\000\000\000\111\000\104\000\
\000\000\000\000\062\000\000\000\078\000\077\000\000\000\076\000\
\000\000\000\000\055\000\000\000\000\000\000\000\070\000\000\000\
\072\000\074\000\075\000\000\000\000\000\000\000\000\000\000\000\
\000\000\117\000\000\000\000\000\085\000\086\000\000\000\000\000\
\067\000\066\000\068\000\000\000\000\000\000\000\000\000\071\000\
\073\000\000\000\057\000\058\000\000\000\000\000\000\000\098\000\
\034\000\000\000\125\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\000\000\000\
\000\000\000\000\069\000\000\000\000\000\000\000\121\000\000\000\
\127\000\079\000\129\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\080\000\000\000\000\000\000\000\083\000\000\000\
\108\000\112\000\082\000"

let yydgoto = "\002\000\
\015\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\017\000\018\000\162\000\020\000\021\000\113\000\110\000\094\000\
\095\000\074\000\097\000\022\000\023\000\024\000\025\000\026\000\
\027\000\082\000\083\000\125\000\163\000\145\000\080\000\102\000\
\103\000\164\000\165\000\166\000\208\000\167\000\168\000\192\000\
\169\000\170\000\171\000\042\000\224\000\204\000\111\000\112\000\
\134\000\177\000\200\000\000\000\178\000\114\000\069\000\238\000\
\000\000"

let yysindex = "\008\000\
\018\255\000\000\000\000\051\001\000\000\000\000\017\255\016\255\
\000\000\209\254\001\255\000\000\017\255\000\000\000\000\000\000\
\063\000\018\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\255\039\255\088\001\017\255\017\255\
\240\254\066\255\066\255\000\000\017\255\044\255\017\255\046\255\
\000\000\000\000\235\255\000\000\000\000\000\000\050\255\000\000\
\000\000\000\000\000\000\057\255\000\000\000\000\000\000\000\000\
\000\000\017\255\000\000\000\000\068\255\000\000\000\000\000\000\
\000\000\000\000\000\000\076\255\000\000\000\000\154\255\017\255\
\017\255\000\000\076\255\076\255\017\255\000\000\250\254\075\255\
\062\255\085\255\089\255\017\255\002\255\000\000\209\254\000\000\
\066\255\066\255\209\254\098\255\076\255\000\000\000\000\027\255\
\084\255\083\255\017\255\000\000\000\000\000\000\017\255\045\255\
\147\255\108\255\017\255\115\255\142\255\119\255\118\255\235\255\
\246\254\128\255\076\255\134\255\136\255\017\255\017\255\000\000\
\000\000\137\255\139\255\145\255\091\255\000\000\000\000\000\000\
\140\255\017\255\157\255\209\254\020\255\017\255\066\255\161\255\
\066\255\066\255\000\000\000\000\000\000\250\254\132\255\150\255\
\173\255\000\000\171\255\000\000\000\000\153\255\000\000\000\000\
\076\255\006\255\000\000\180\255\000\000\000\000\017\255\000\000\
\179\255\132\255\000\000\132\255\132\255\002\255\000\000\143\255\
\000\000\000\000\000\000\235\255\132\255\181\255\209\254\066\255\
\183\255\000\000\184\255\017\255\000\000\000\000\131\255\209\254\
\000\000\000\000\000\000\058\255\017\255\186\255\002\255\000\000\
\000\000\002\255\000\000\000\000\187\255\076\255\230\255\000\000\
\000\000\185\255\000\000\190\255\192\255\233\255\209\254\194\255\
\198\255\209\254\202\255\203\255\172\255\206\255\000\000\205\255\
\214\255\213\255\000\000\221\255\222\255\209\254\000\000\228\255\
\000\000\000\000\000\000\172\255\223\255\229\255\227\255\066\255\
\231\255\000\000\000\000\172\255\149\001\237\255\000\000\234\255\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\017\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\239\255\240\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\113\000\000\000\000\000\038\001\000\000\
\000\000\000\000\136\000\192\000\000\000\000\000\000\000\000\000\
\231\254\000\000\242\255\240\255\000\000\000\000\061\255\000\000\
\243\255\000\000\061\255\000\000\215\000\000\000\000\000\010\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\240\255\000\000\000\000\000\000\245\255\000\000\
\246\255\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\244\255\000\000\251\255\000\000\000\000\000\000\
\000\000\000\000\000\000\061\255\022\255\000\000\243\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\220\254\000\000\
\000\000\000\000\000\000\000\000\000\000\092\255\000\000\000\000\
\015\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\255\220\254\000\000\220\254\220\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\252\255\000\000\061\255\000\000\
\040\255\000\000\000\000\000\000\000\000\000\000\241\255\061\255\
\000\000\000\000\000\000\248\255\000\000\021\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\151\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\255\000\000\
\000\000\061\255\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\255\000\000\000\000\
\000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\255\255\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\007\000\000\000\177\000\000\000\000\000\000\000\000\000\
\026\001\000\000\029\000\000\000\000\000\226\255\176\255\000\000\
\000\000\000\000\193\255\000\000\000\000\000\000\145\000\000\000\
\151\000\178\255\000\000\000\000\044\000\000\000\000\000\166\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\141\000\000\000\000\000\125\255\071\255\000\000\000\000\044\001\
\000\000\000\000\000\000\000\000\000\000\176\000\000\000\075\000\
\000\000"

let yytablesize = 777
let yytable = "\068\000\
\102\000\065\000\003\000\075\000\076\000\108\000\028\000\016\000\
\001\000\098\000\116\000\172\000\051\000\038\000\040\000\090\000\
\003\000\003\000\003\000\047\000\051\000\092\000\131\000\028\000\
\016\000\041\000\044\000\045\000\128\000\019\000\172\000\090\000\
\172\000\172\000\052\000\135\000\172\000\070\000\071\000\072\000\
\093\000\172\000\233\000\077\000\073\000\081\000\019\000\179\000\
\085\000\016\000\240\000\149\000\039\000\004\000\050\000\140\000\
\106\000\053\000\051\000\115\000\046\000\114\000\048\000\065\000\
\088\000\037\000\003\000\054\000\055\000\056\000\057\000\037\000\
\050\000\092\000\004\000\118\000\051\000\092\000\096\000\096\000\
\119\000\126\000\084\000\099\000\005\000\126\000\078\000\079\000\
\006\000\007\000\081\000\109\000\086\000\100\000\197\000\101\000\
\206\000\087\000\207\000\008\000\011\000\090\000\095\000\205\000\
\009\000\122\000\153\000\154\000\089\000\123\000\010\000\104\000\
\022\000\081\000\011\000\011\000\011\000\133\000\016\000\092\000\
\131\000\105\000\106\000\012\000\139\000\096\000\218\000\114\000\
\013\000\221\000\116\000\114\000\003\000\116\000\107\000\023\000\
\147\000\116\000\117\000\120\000\150\000\231\000\014\000\003\000\
\121\000\198\000\124\000\114\000\054\000\161\000\127\000\059\000\
\129\000\130\000\003\000\054\000\055\000\056\000\057\000\114\000\
\131\000\028\000\016\000\132\000\011\000\183\000\114\000\004\000\
\161\000\136\000\161\000\161\000\188\000\191\000\190\000\137\000\
\138\000\194\000\016\000\161\000\003\000\060\000\146\000\141\000\
\142\000\114\000\202\000\189\000\143\000\101\000\144\000\031\000\
\101\000\173\000\091\000\209\000\101\000\211\000\005\000\148\000\
\212\000\237\000\006\000\152\000\041\000\185\000\237\000\186\000\
\187\000\005\000\174\000\175\000\176\000\006\000\119\000\041\000\
\195\000\092\000\009\000\184\000\156\000\199\000\203\000\196\000\
\157\000\201\000\210\000\078\000\213\000\009\000\011\000\214\000\
\215\000\216\000\217\000\003\000\219\000\012\000\220\000\059\000\
\158\000\011\000\207\000\222\000\223\000\225\000\005\000\226\000\
\012\000\159\000\006\000\180\000\011\000\227\000\228\000\160\000\
\014\000\102\000\102\000\102\000\102\000\102\000\229\000\230\000\
\232\000\234\000\009\000\014\000\236\000\060\000\027\000\235\000\
\020\000\239\000\242\000\059\000\243\000\048\000\011\000\049\000\
\061\000\126\000\102\000\124\000\109\000\012\000\096\000\110\000\
\056\000\065\000\128\000\114\000\102\000\118\000\102\000\102\000\
\120\000\120\000\102\000\049\000\181\000\005\000\102\000\107\000\
\014\000\006\000\182\000\155\000\193\000\043\000\151\000\241\000\
\000\000\106\000\106\000\106\000\106\000\106\000\000\000\000\000\
\000\000\009\000\000\000\102\000\000\000\000\000\000\000\102\000\
\102\000\102\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\102\000\000\000\012\000\000\000\102\000\102\000\
\000\000\102\000\000\000\000\000\106\000\102\000\106\000\106\000\
\000\000\000\000\106\000\102\000\102\000\114\000\106\000\014\000\
\000\000\114\000\102\000\000\000\000\000\102\000\000\000\102\000\
\000\000\022\000\000\000\000\000\102\000\000\000\102\000\000\000\
\000\000\114\000\000\000\106\000\102\000\102\000\000\000\106\000\
\106\000\106\000\000\000\000\000\000\000\114\000\000\000\000\000\
\023\000\000\000\106\000\000\000\114\000\000\000\106\000\106\000\
\000\000\106\000\000\000\000\000\022\000\106\000\022\000\000\000\
\000\000\000\000\000\000\106\000\106\000\000\000\000\000\114\000\
\000\000\000\000\106\000\000\000\000\000\106\000\000\000\106\000\
\000\000\000\000\000\000\023\000\106\000\023\000\106\000\000\000\
\000\000\000\000\000\000\022\000\106\000\106\000\000\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\022\000\000\000\000\000\000\000\000\000\022\000\
\000\000\022\000\023\000\000\000\000\000\022\000\023\000\023\000\
\023\000\000\000\000\000\022\000\022\000\000\000\000\000\119\000\
\000\000\023\000\022\000\000\000\000\000\022\000\023\000\022\000\
\023\000\000\000\000\000\031\000\023\000\031\000\022\000\000\000\
\000\000\000\000\023\000\023\000\022\000\022\000\000\000\000\000\
\000\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\119\000\000\000\119\000\023\000\000\000\000\000\
\000\000\000\000\031\000\023\000\023\000\000\000\031\000\031\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\031\000\000\000\000\000\000\000\000\000\031\000\000\000\
\031\000\119\000\000\000\000\000\031\000\119\000\119\000\119\000\
\000\000\000\000\031\000\031\000\000\000\000\000\000\000\000\000\
\119\000\031\000\000\000\000\000\031\000\119\000\031\000\119\000\
\000\000\000\000\027\000\119\000\027\000\031\000\000\000\000\000\
\000\000\119\000\119\000\031\000\031\000\000\000\000\000\000\000\
\119\000\000\000\000\000\119\000\000\000\119\000\000\000\000\000\
\000\000\118\000\000\000\118\000\119\000\000\000\000\000\000\000\
\000\000\027\000\119\000\119\000\000\000\027\000\027\000\027\000\
\003\000\054\000\055\000\056\000\057\000\000\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\027\000\000\000\027\000\
\118\000\000\000\000\000\027\000\118\000\118\000\118\000\000\000\
\000\000\027\000\027\000\000\000\000\000\000\000\000\000\118\000\
\027\000\000\000\000\000\027\000\118\000\027\000\118\000\000\000\
\000\000\000\000\118\000\029\000\027\000\000\000\058\000\000\000\
\000\000\118\000\027\000\027\000\000\000\030\000\000\000\118\000\
\000\000\000\000\118\000\000\000\118\000\003\000\054\000\055\000\
\056\000\057\000\000\000\118\000\000\000\000\000\000\000\000\000\
\000\000\118\000\118\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\090\000\000\000\
\000\000\000\000\000\000\031\000\032\000\033\000\034\000\035\000\
\036\000\000\000\011\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000"

let yycheck = "\030\000\
\000\000\038\001\001\001\034\000\035\000\084\000\001\000\001\000\
\001\000\073\000\091\000\143\000\038\001\007\000\008\000\026\001\
\001\001\001\001\001\001\013\000\046\001\001\001\001\001\018\000\
\018\000\073\001\026\001\027\001\107\000\001\000\162\000\026\001\
\164\000\165\000\028\000\046\001\168\000\031\000\032\000\056\001\
\071\000\173\000\228\000\037\000\061\001\039\000\018\000\042\001\
\043\000\043\000\236\000\132\000\037\001\036\001\053\001\119\000\
\000\000\029\000\057\001\090\000\060\001\001\001\000\000\100\001\
\058\000\056\001\001\001\002\001\003\001\004\001\005\001\062\001\
\053\001\053\001\036\001\049\001\057\001\057\001\072\000\073\000\
\054\001\042\001\037\001\077\000\067\001\046\001\043\001\044\001\
\071\001\072\001\084\000\085\000\043\001\100\001\175\000\102\001\
\039\001\041\001\041\001\082\001\099\001\026\001\042\001\184\000\
\087\001\099\000\137\000\138\000\041\001\103\000\093\001\037\001\
\000\000\107\000\099\001\099\001\099\001\112\000\112\000\099\001\
\099\001\060\001\038\001\106\001\118\000\119\000\207\000\067\001\
\111\001\210\000\039\001\071\001\001\001\042\001\046\001\000\000\
\130\000\046\001\041\001\056\001\134\000\222\000\125\001\001\001\
\062\001\176\000\102\001\087\001\002\001\143\000\043\001\086\001\
\038\001\012\001\001\001\002\001\003\001\004\001\005\001\099\001\
\042\001\156\000\156\000\046\001\099\001\159\000\106\001\036\001\
\162\000\042\001\164\000\165\000\166\000\168\000\168\000\042\001\
\041\001\172\000\172\000\173\000\001\001\116\001\043\001\047\001\
\046\001\125\001\180\000\045\001\044\001\039\001\100\001\000\000\
\042\001\044\001\041\001\189\000\046\001\191\000\067\001\043\001\
\194\000\232\000\071\001\043\001\073\001\162\000\237\000\164\000\
\165\000\067\001\038\001\041\001\060\001\071\001\000\000\073\001\
\173\000\064\001\087\001\041\001\089\001\039\001\092\001\043\001\
\093\001\042\001\041\001\043\001\042\001\087\001\099\001\002\001\
\043\001\042\001\002\001\001\001\043\001\106\001\041\001\086\001\
\109\001\099\001\041\001\041\001\073\001\040\001\067\001\043\001\
\106\001\118\001\071\001\072\001\099\001\040\001\042\001\124\001\
\125\001\001\001\002\001\003\001\004\001\005\001\042\001\042\001\
\037\001\043\001\087\001\125\001\042\001\116\001\000\000\043\001\
\000\000\043\001\038\001\037\001\043\001\038\001\099\001\038\001\
\037\001\105\000\026\001\043\001\042\001\106\001\042\001\042\001\
\038\001\038\001\043\001\001\001\036\001\000\000\038\001\039\001\
\037\001\043\001\042\001\018\000\156\000\067\001\046\001\038\001\
\125\001\071\001\156\000\142\000\168\000\010\000\135\000\237\000\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\087\001\255\255\067\001\255\255\255\255\255\255\071\001\
\072\001\073\001\255\255\255\255\255\255\099\001\255\255\255\255\
\255\255\255\255\082\001\255\255\106\001\255\255\086\001\087\001\
\255\255\089\001\255\255\255\255\036\001\093\001\038\001\039\001\
\255\255\255\255\042\001\099\001\100\001\067\001\046\001\125\001\
\255\255\071\001\106\001\255\255\255\255\109\001\255\255\111\001\
\255\255\001\001\255\255\255\255\116\001\255\255\118\001\255\255\
\255\255\087\001\255\255\067\001\124\001\125\001\255\255\071\001\
\072\001\073\001\255\255\255\255\255\255\099\001\255\255\255\255\
\001\001\255\255\082\001\255\255\106\001\255\255\086\001\087\001\
\255\255\089\001\255\255\255\255\036\001\093\001\038\001\255\255\
\255\255\255\255\255\255\099\001\100\001\255\255\255\255\125\001\
\255\255\255\255\106\001\255\255\255\255\109\001\255\255\111\001\
\255\255\255\255\255\255\036\001\116\001\038\001\118\001\255\255\
\255\255\255\255\255\255\067\001\124\001\125\001\255\255\071\001\
\072\001\073\001\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\255\255\082\001\255\255\255\255\255\255\255\255\087\001\
\255\255\089\001\067\001\255\255\255\255\093\001\071\001\072\001\
\073\001\255\255\255\255\099\001\100\001\255\255\255\255\001\001\
\255\255\082\001\106\001\255\255\255\255\109\001\087\001\111\001\
\089\001\255\255\255\255\036\001\093\001\038\001\118\001\255\255\
\255\255\255\255\099\001\100\001\124\001\125\001\255\255\255\255\
\255\255\106\001\255\255\255\255\109\001\255\255\111\001\255\255\
\255\255\255\255\036\001\255\255\038\001\118\001\255\255\255\255\
\255\255\255\255\067\001\124\001\125\001\255\255\071\001\072\001\
\073\001\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\082\001\255\255\255\255\255\255\255\255\087\001\255\255\
\089\001\067\001\255\255\255\255\093\001\071\001\072\001\073\001\
\255\255\255\255\099\001\100\001\255\255\255\255\255\255\255\255\
\082\001\106\001\255\255\255\255\109\001\087\001\111\001\089\001\
\255\255\255\255\036\001\093\001\038\001\118\001\255\255\255\255\
\255\255\099\001\100\001\124\001\125\001\255\255\255\255\255\255\
\106\001\255\255\255\255\109\001\255\255\111\001\255\255\255\255\
\255\255\036\001\255\255\038\001\118\001\255\255\255\255\255\255\
\255\255\067\001\124\001\125\001\255\255\071\001\072\001\073\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\082\001\255\255\255\255\255\255\255\255\087\001\255\255\089\001\
\067\001\255\255\255\255\093\001\071\001\072\001\073\001\255\255\
\255\255\099\001\100\001\255\255\255\255\255\255\255\255\082\001\
\106\001\255\255\255\255\109\001\087\001\111\001\089\001\255\255\
\255\255\255\255\093\001\081\001\118\001\255\255\047\001\255\255\
\255\255\100\001\124\001\125\001\255\255\091\001\255\255\106\001\
\255\255\255\255\109\001\255\255\111\001\001\001\002\001\003\001\
\004\001\005\001\255\255\118\001\255\255\255\255\255\255\255\255\
\255\255\124\001\125\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\086\001\026\001\255\255\
\255\255\255\255\255\255\129\001\130\001\131\001\132\001\133\001\
\134\001\255\255\099\001\137\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\116\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\099\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\116\001"

let yynames_const = "\
  TYPEDEF_NAME\000\
  NAMESPACE_NAME\000\
  CLASS_NAME\000\
  ENUM_NAME\000\
  TEMPLATE_NAME\000\
  ELLIPSIS\000\
  COLONCOLON\000\
  DOTSTAR\000\
  ADDEQ\000\
  SUBEQ\000\
  MULEQ\000\
  DIVEQ\000\
  MODEQ\000\
  XOREQ\000\
  ANDEQ\000\
  OREQ\000\
  SL\000\
  SR\000\
  SREQ\000\
  SLEQ\000\
  EQ\000\
  NOTEQ\000\
  LTEQ\000\
  GTEQ\000\
  ANDAND\000\
  OROR\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  ARROWSTAR\000\
  ARROW\000\
  SHARP\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  LPARENTHESIS\000\
  RPARENTHESIS\000\
  SEMICOLON\000\
  COLON\000\
  TILDE\000\
  COMMA\000\
  EXCLAMATION\000\
  QUESTION\000\
  DOT\000\
  BACKSLASH\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  DIV\000\
  PERCENT\000\
  QUOTE\000\
  AND\000\
  OR\000\
  XOR\000\
  EQUAL\000\
  INF\000\
  SUP\000\
  ZERO\000\
  ATTRIBUTE\000\
  ASM\000\
  AUTO\000\
  BOOL\000\
  BREAK\000\
  CASE\000\
  CATCH\000\
  CHAR\000\
  CLASS\000\
  CONST\000\
  CONST_CAST\000\
  CONTINUE\000\
  DEFAULT\000\
  DELETE\000\
  DO\000\
  DOUBLE\000\
  DYNAMIC_CAST\000\
  ELSE\000\
  ENUM\000\
  EXPLICIT\000\
  EXPORT\000\
  EXTERN\000\
  FALSE\000\
  FLOAT\000\
  FOR\000\
  FRIEND\000\
  GOTO\000\
  IF\000\
  INHERITED\000\
  INLINE\000\
  INT\000\
  LONG\000\
  MUTABLE\000\
  NAMESPACE\000\
  NEW\000\
  OPERATOR\000\
  PRIVATE\000\
  PROTECTED\000\
  PUBLIC\000\
  REGISTER\000\
  REINTERPRET_CAST\000\
  RETURN\000\
  SHORT\000\
  SIGNED\000\
  SIZEOF\000\
  STATIC\000\
  STATIC_CAST\000\
  STRUCT\000\
  SWITCH\000\
  TEMPLATE\000\
  THIS\000\
  THROW\000\
  TRUE\000\
  TRY\000\
  TYPEDEF\000\
  TYPEID\000\
  TYPENAME\000\
  UNION\000\
  UNSIGNED\000\
  USING\000\
  VIRTUAL\000\
  VOID\000\
  VOLATILE\000\
  WCHAR_T\000\
  WHILE\000\
  IFNDEF\000\
  DEFINE\000\
  INCLUDE\000\
  IFDEF\000\
  ELIF\000\
  ENDIF\000\
  UNDEF\000\
  LINE\000\
  ERROR\000\
  PRAGMA\000\
  EOF\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  INTEGER\000\
  FLOATING\000\
  CHARACTER\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "cgram.mly"
            ( _1 )
# 810 "cgram.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "cgram.mly"
               ( "operator==" )
# 816 "cgram.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "cgram.mly"
                  ( "operator!=" )
# 822 "cgram.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "cgram.mly"
                  ( "operator=" )
# 828 "cgram.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'integer_literal) in
    Obj.repr(
# 86 "cgram.mly"
                 ( _1 )
# 835 "cgram.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'character_literal) in
    Obj.repr(
# 87 "cgram.mly"
                     ( _1 )
# 842 "cgram.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'floating_literal) in
    Obj.repr(
# 88 "cgram.mly"
                    ( _1 )
# 849 "cgram.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string_literal) in
    Obj.repr(
# 89 "cgram.mly"
                  ( _1 )
# 856 "cgram.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'boolean_literal) in
    Obj.repr(
# 90 "cgram.mly"
                   ( _1 )
# 863 "cgram.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int32) in
    Obj.repr(
# 94 "cgram.mly"
         ( print_string ("yacc: literal =" ^ (Int32.to_string _1));flush stdout;
	          VInteger _1 )
# 871 "cgram.ml"
               : 'integer_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "cgram.mly"
           ( VChar _1 )
# 878 "cgram.ml"
               : 'character_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 103 "cgram.mly"
          ( VFloat _1 )
# 885 "cgram.ml"
               : 'floating_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "cgram.mly"
        ( VString _1 )
# 892 "cgram.ml"
               : 'string_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "cgram.mly"
      (print_string "yacc: TRUE\n";flush stdout;VBool true)
# 898 "cgram.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "cgram.mly"
         ( VBool false)
# 904 "cgram.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 120 "cgram.mly"
                    ( let m = !macro_list
						 and i = !inclusion_list
						 and e = !enum_list
						 and c = !classe_list
						 in 
						 macro_list := [];
						 inclusion_list := [];
						 enum_list := [];
						 classe_list := [];
						 
						 {	macros = m;
	                        inclusions = i;
	                        enums = e;	
	                        classes = c; } 
	                   )
# 925 "cgram.ml"
               : Struct.translation_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'directive) in
    Obj.repr(
# 138 "cgram.mly"
            (print_string"yacc: statement (directive)\n";flush stdout;)
# 932 "cgram.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 139 "cgram.mly"
              (print_string"yacc: statement (declaration)\n";flush stdout;)
# 939 "cgram.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inline_methode) in
    Obj.repr(
# 140 "cgram.mly"
                 ()
# 946 "cgram.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "cgram.mly"
             ( [] )
# 952 "cgram.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 146 "cgram.mly"
  ( _1 :: _2)
# 960 "cgram.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 150 "cgram.mly"
                       ()
# 967 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 151 "cgram.mly"
                          ()
# 974 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 152 "cgram.mly"
                                   (print_string ("yacc: #if !"^_4^"\n");flush stdout;)
# 981 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 153 "cgram.mly"
                           ()
# 988 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "cgram.mly"
               (print_string "yacc: #endif\n";flush stdout;)
# 994 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'identifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 155 "cgram.mly"
                                                                           ()
# 1003 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'directive_attribute) in
    Obj.repr(
# 156 "cgram.mly"
                                               ()
# 1011 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression_opt) in
    Obj.repr(
# 157 "cgram.mly"
                                          (print_string ("yacc: #define " ^ _3 ^"\n");flush stdout;)
# 1019 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inclusion) in
    Obj.repr(
# 158 "cgram.mly"
                           ()
# 1026 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 159 "cgram.mly"
                         ()
# 1033 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'directive) in
    Obj.repr(
# 160 "cgram.mly"
                        ()
# 1040 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    Obj.repr(
# 161 "cgram.mly"
                                                             ()
# 1049 "cgram.ml"
               : 'directive))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    Obj.repr(
# 165 "cgram.mly"
                                                                          ()
# 1056 "cgram.ml"
               : 'directive_attribute))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'filename) in
    Obj.repr(
# 169 "cgram.mly"
                    (inclusion_list := (System _2 ):: !inclusion_list)
# 1063 "cgram.ml"
               : 'inclusion))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'filename) in
    Obj.repr(
# 170 "cgram.mly"
                        (inclusion_list := (User _2 ):: !inclusion_list)
# 1070 "cgram.ml"
               : 'inclusion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 174 "cgram.mly"
            ( _1 )
# 1077 "cgram.ml"
               : 'filename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 175 "cgram.mly"
                             ( _1 ^ "." ^ _3 )
# 1085 "cgram.ml"
               : 'filename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'filename) in
    Obj.repr(
# 176 "cgram.mly"
                             ( _1 ^ "/" ^ _3)
# 1093 "cgram.ml"
               : 'filename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'named_enum) in
    Obj.repr(
# 180 "cgram.mly"
            ( enum_list := _1 :: !enum_list; )
# 1100 "cgram.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'anonymous_enum) in
    Obj.repr(
# 181 "cgram.mly"
                  ( enum_list := _1 :: !enum_list; )
# 1107 "cgram.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abstract_struct) in
    Obj.repr(
# 182 "cgram.mly"
                   ()
# 1114 "cgram.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abstract_class) in
    Obj.repr(
# 183 "cgram.mly"
                  ()
# 1121 "cgram.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'concrete_class) in
    Obj.repr(
# 184 "cgram.mly"
                  (print_string "yacc: declaration\n";flush stdout; classe_list := _1 :: !classe_list )
# 1128 "cgram.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fonction_declaration) in
    Obj.repr(
# 185 "cgram.mly"
                        ()
# 1135 "cgram.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'constant_constructor_list) in
    Obj.repr(
# 189 "cgram.mly"
                                                         ( { enum_name = None; enum_values = _3; } )
# 1142 "cgram.ml"
               : 'anonymous_enum))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'constant_constructor_list) in
    Obj.repr(
# 193 "cgram.mly"
                                                                   ( { enum_name = Some _2; enum_values = _4; } )
# 1150 "cgram.ml"
               : 'named_enum))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "cgram.mly"
               ( [] )
# 1156 "cgram.ml"
               : 'constant_constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant_constructor) in
    Obj.repr(
# 198 "cgram.mly"
                        ( [ _1 ] )
# 1163 "cgram.ml"
               : 'constant_constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constant_constructor) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constant_constructor_list) in
    Obj.repr(
# 199 "cgram.mly"
                                                       ( _1 :: _3; )
# 1171 "cgram.ml"
               : 'constant_constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 203 "cgram.mly"
              ( { enum_value_name = _1; enum_value_value = None;} )
# 1178 "cgram.ml"
               : 'constant_constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'integer_literal) in
    Obj.repr(
# 204 "cgram.mly"
                                    ( { enum_value_name = _1; enum_value_value = Some _3; } )
# 1186 "cgram.ml"
               : 'constant_constructor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    Obj.repr(
# 208 "cgram.mly"
                           ()
# 1193 "cgram.ml"
               : 'abstract_class))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'identifier) in
    Obj.repr(
# 212 "cgram.mly"
                             ()
# 1200 "cgram.ml"
               : 'abstract_struct))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarations_list) in
    Obj.repr(
# 216 "cgram.mly"
                                ( _3 )
# 1207 "cgram.ml"
               : 'public_methodes))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "cgram.mly"
             ( [] )
# 1213 "cgram.ml"
               : 'private_methodes))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarations_list) in
    Obj.repr(
# 221 "cgram.mly"
                                   ( _3 )
# 1220 "cgram.ml"
               : 'private_methodes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'heritage) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'public_methodes) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'private_methodes) in
    Obj.repr(
# 229 "cgram.mly"
 (
		print_string "yacc : concrete_class\n";flush stdout;
		let p = !private_methodes 
		and a = !attributes 
		in
		private_methodes:= [];
		attributes := [];
		{
			class_name = _2;
			heritages = _3;
			public_methodes= _5;
			private_methodes = p;
			attributes = a;
		}
	)
# 1244 "cgram.ml"
               : 'concrete_class))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "cgram.mly"
               ( [] )
# 1250 "cgram.ml"
               : 'heritage))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'heritage_list) in
    Obj.repr(
# 248 "cgram.mly"
                       ( _2 )
# 1257 "cgram.ml"
               : 'heritage))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'accessor) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 253 "cgram.mly"
                     ( 
							if _1 = "public" then [Public _2]
						  	else if _1 = "private" then [Private _2]
						  	else raise (Invalid_argument _1)	
						)
# 1269 "cgram.ml"
               : 'heritage_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'accessor) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'heritage_list) in
    Obj.repr(
# 259 "cgram.mly"
      ( 
							if _1 = "public" then (Public _2)::_4
						  	else if _1 = "private" then (Private _2)::_4
						  	else raise (Invalid_argument _1)
						)
# 1282 "cgram.ml"
               : 'heritage_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "cgram.mly"
         ( "public" )
# 1288 "cgram.ml"
               : 'accessor))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "cgram.mly"
          ( "private" )
# 1294 "cgram.ml"
               : 'accessor))
; (fun __caml_parser_env ->
    Obj.repr(
# 272 "cgram.mly"
               ( [] )
# 1300 "cgram.ml"
               : 'declarations_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methode) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declarations_list) in
    Obj.repr(
# 273 "cgram.mly"
                             ( _1::_2 )
# 1308 "cgram.ml"
               : 'declarations_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'directive) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declarations_list) in
    Obj.repr(
# 274 "cgram.mly"
                               (print_string "yacc: directive\n";flush stdout;_2)
# 1316 "cgram.ml"
               : 'declarations_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declarations_list) in
    Obj.repr(
# 275 "cgram.mly"
                               ( attributes := _1:: !attributes; _2 )
# 1324 "cgram.ml"
               : 'declarations_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'array_size_opt) in
    Obj.repr(
# 280 "cgram.mly"
 (
    match _3 with | None -> QPrivate_attribute,Param (_1,_2, None)
 	              | Some array_length -> QPrivate_attribute, Param (TArray(array_length,_1), _2, None)
 )
# 1336 "cgram.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 287 "cgram.mly"
               ( _1 )
# 1343 "cgram.ml"
               : 'methode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qualifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'destructor) in
    Obj.repr(
# 289 "cgram.mly"
  ( 
			{
				qualifiers = [ _1 ];
				meth_type = _2.meth_type;
				name = _2.name;
				params = _2.params;
			}
		)
# 1358 "cgram.ml"
               : 'methode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_methode) in
    Obj.repr(
# 297 "cgram.mly"
                (print_string "yacc: methode(pure_methode)\n";flush stdout; _1 )
# 1365 "cgram.ml"
               : 'methode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qualifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pure_methode) in
    Obj.repr(
# 299 "cgram.mly"
  (
			print_string "yacc: methode(pure_methode)\n";flush stdout; 
			{
				qualifiers = [ _1 ];
				meth_type = _2.meth_type;
				name = _2.name;
				params = _2.params;
			}
		)
# 1381 "cgram.ml"
               : 'methode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef_declaration) in
    Obj.repr(
# 309 "cgram.mly"
  ( 
			macro_list := _1 :: !macro_list;
			{
				qualifiers = [];
				meth_type = TVoid;
				name = "";
				params = [];
			}
		)
# 1396 "cgram.ml"
               : 'methode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'friend_declaration) in
    Obj.repr(
# 319 "cgram.mly"
  ( 
			{
				qualifiers = [];
				meth_type = TVoid;
				name = "";
				params = [];
			}
		)
# 1410 "cgram.ml"
               : 'methode))
; (fun __caml_parser_env ->
    Obj.repr(
# 340 "cgram.mly"
           (print_string "yacc: VIRTUAL\n";flush stdout; QVirtual )
# 1416 "cgram.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "cgram.mly"
          (print_string "yacc: STATIC\n";flush stdout; QStatic )
# 1422 "cgram.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "cgram.mly"
          (QInline )
# 1428 "cgram.ml"
               : 'qualifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    Obj.repr(
# 349 "cgram.mly"
 (
		{
			qualifiers = [];
			meth_type = TVoid;
			name = _1;
			params = _3;
		}	
	)
# 1443 "cgram.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'qualifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    Obj.repr(
# 358 "cgram.mly"
 (
		{
			qualifiers = [];
			meth_type = TVoid;
			name = _2;
			params = _4;
		}	
	)
# 1459 "cgram.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    Obj.repr(
# 370 "cgram.mly"
  (
			{
				qualifiers = [];
				meth_type = TVoid;
				name = "~"^_2;
				params = [] ;
			}	
		)
# 1473 "cgram.ml"
               : 'destructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'storage_class) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'var_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'identifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'param_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'methode_storage_class_opt) in
    Obj.repr(
# 383 "cgram.mly"
 (
	print_string ("yacc: storage_class pure_methode(identifier="^_3^")\n");flush stdout;
		{
			qualifiers = [QConst];
			meth_type = _2;
			name = _3;
			params = _5;
		}
	)
# 1492 "cgram.ml"
               : 'pure_methode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'param_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'methode_storage_class_opt) in
    Obj.repr(
# 394 "cgram.mly"
                                    (print_string ("yacc: pure_methode(identifier="^_2^")\n");flush stdout;

	print_string ("yacc: storage_class pure_methode(identifier="^_2^")\n");flush stdout;
		{
			qualifiers = [];
			meth_type = _1;
			name = _2;
			params = _4;
		}
	 

)
# 1513 "cgram.ml"
               : 'pure_methode))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inherited_opt) in
    Obj.repr(
# 409 "cgram.mly"
                                            (Typedef _2;)
# 1521 "cgram.ml"
               : 'typedef_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abstract_class) in
    Obj.repr(
# 413 "cgram.mly"
                         ()
# 1528 "cgram.ml"
               : 'friend_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fonction_declaration) in
    Obj.repr(
# 414 "cgram.mly"
                               ()
# 1535 "cgram.ml"
               : 'friend_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 418 "cgram.mly"
        (print_string "yacc:void\n";flush stdout;TVoid)
# 1541 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 419 "cgram.mly"
        (TChar )
# 1547 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "cgram.mly"
        (print_string "yacc:BOOL\n";flush stdout;TBool)
# 1553 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 421 "cgram.mly"
         (TFloat )
# 1559 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 422 "cgram.mly"
         (TShort)
# 1565 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 423 "cgram.mly"
                 (print_string ("yacc: "^ _1 ^" (identifier_type)\n");flush stdout;Type _1)
# 1572 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    Obj.repr(
# 424 "cgram.mly"
                 ( TPointeur _1 )
# 1579 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    Obj.repr(
# 425 "cgram.mly"
                 ( TReference _1 )
# 1586 "cgram.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 430 "cgram.mly"
               ( [] )
# 1592 "cgram.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 431 "cgram.mly"
         ( print_string "yacc : param\n";flush stdout; [ _1] )
# 1599 "cgram.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 432 "cgram.mly"
                          ( _1 :: _3 )
# 1607 "cgram.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'storage_class_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var_type_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'default_value_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'array_size_and_opt) in
    Obj.repr(
# 437 "cgram.mly"
  (	
			let name = match _3 with | None -> ""
									 | Some s -> s
			and	default_value = _4
			and param_type = match _5 with | None -> _2
										   | Some Pointer -> TPointeur _2
                                           | Some (Array_Size n) -> TArray (n,_2)
			in
			let param_type_storage_class = match _1 with | None -> param_type
														 | Some QConst -> TConst param_type
														 | Some _ -> _2
			in											 
			Param (param_type_storage_class, name,default_value)
		)
# 1631 "cgram.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'storage_class_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'default_value_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'array_size_and_opt) in
    Obj.repr(
# 456 "cgram.mly"
  (	
			let name = match _3 with | None -> ""
									 | Some s -> s
			and	default_value = _4
			and param_type = match _5 with | None -> _2
										   | Some Pointer -> TPointeur _2
                                           | Some (Array_Size n) -> TArray (n,_2)
			in
			let param_type_storage_class = match _1 with | None -> param_type
														 | Some QConst -> TConst param_type
														 | Some _ -> _2
			in											 
			Param (param_type_storage_class, name,default_value)
		)
# 1655 "cgram.ml"
               : 'param_directive))
; (fun __caml_parser_env ->
    Obj.repr(
# 472 "cgram.mly"
       (print_string "yacc:CONST\n";flush stdout; QConst;)
# 1661 "cgram.ml"
               : 'storage_class))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 476 "cgram.mly"
                  (print_string "yacc: default_value";flush stdout ; _2)
# 1668 "cgram.ml"
               : 'default_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 480 "cgram.mly"
              (VVariable _1)
# 1675 "cgram.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 481 "cgram.mly"
           (_1)
# 1682 "cgram.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'identifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'arguments) in
    Obj.repr(
# 482 "cgram.mly"
                                                            (VFunction (_1, _3); )
# 1690 "cgram.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression_booleenne) in
    Obj.repr(
# 483 "cgram.mly"
                        ( _1 )
# 1697 "cgram.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 487 "cgram.mly"
                            ( VOp(_1,"==", _3) )
# 1705 "cgram.ml"
               : 'expression_booleenne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 491 "cgram.mly"
              ()
# 1712 "cgram.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 492 "cgram.mly"
                              ()
# 1720 "cgram.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 496 "cgram.mly"
        ( [] )
# 1726 "cgram.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 497 "cgram.mly"
              ( [_1] )
# 1733 "cgram.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments) in
    Obj.repr(
# 498 "cgram.mly"
                              ( _1 :: _3)
# 1741 "cgram.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'storage_class_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 10 : 'var_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'identifier) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : 'identifier) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'param_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'methode_storage_class_opt) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 503 "cgram.mly"
                                                          ()
# 1754 "cgram.ml"
               : 'inline_methode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    Obj.repr(
# 507 "cgram.mly"
                                                                   ()
# 1763 "cgram.ml"
               : 'fonction_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 521 "cgram.mly"
             ( None)
# 1769 "cgram.ml"
               : 'storage_class_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'storage_class) in
    Obj.repr(
# 522 "cgram.mly"
                 ( Some _1 )
# 1776 "cgram.ml"
               : 'storage_class_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 526 "cgram.mly"
             ( None )
# 1782 "cgram.ml"
               : 'default_value_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'default_value) in
    Obj.repr(
# 527 "cgram.mly"
                ( Some _1 )
# 1789 "cgram.ml"
               : 'default_value_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 531 "cgram.mly"
             ( None )
# 1795 "cgram.ml"
               : 'expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 532 "cgram.mly"
             ( Some _1 )
# 1802 "cgram.ml"
               : 'expression_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 536 "cgram.mly"
             ()
# 1808 "cgram.ml"
               : 'methode_storage_class_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 537 "cgram.mly"
        (print_string "yacc : CONST(methode_storage_class)";flush stdout;)
# 1814 "cgram.ml"
               : 'methode_storage_class_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 541 "cgram.mly"
             (print_string ("yacc : epsilon (identifier_opt)");flush stdout; None )
# 1820 "cgram.ml"
               : 'identifier_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 542 "cgram.mly"
              (print_string ("yacc : "^_1^" (identifier_opt)");flush stdout; Some _1)
# 1827 "cgram.ml"
               : 'identifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 546 "cgram.mly"
              ( )
# 1833 "cgram.ml"
               : 'inherited_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 547 "cgram.mly"
            ()
# 1839 "cgram.ml"
               : 'inherited_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 551 "cgram.mly"
             ( None)
# 1845 "cgram.ml"
               : 'array_size_and_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int32) in
    Obj.repr(
# 554 "cgram.mly"
  (
			print_string "yacc: array_size_opt\n";flush stdout;
			Some (Array_Size _2)
	   )
# 1855 "cgram.ml"
               : 'array_size_and_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 561 "cgram.mly"
             ( None )
# 1861 "cgram.ml"
               : 'array_size_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int32) in
    Obj.repr(
# 563 "cgram.mly"
  (
			print_string "yacc: array_size_opt\n";flush stdout;
			Some _2
		)
# 1871 "cgram.ml"
               : 'array_size_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 570 "cgram.mly"
             ( None )
# 1877 "cgram.ml"
               : 'var_type_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_type) in
    Obj.repr(
# 572 "cgram.mly"
  (
			print_string "yacc: array_size_opt\n";flush stdout;
			Some _1
		)
# 1887 "cgram.ml"
               : 'var_type_opt))
(* Entry translation_unit *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let translation_unit (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Struct.translation_unit)
;;
